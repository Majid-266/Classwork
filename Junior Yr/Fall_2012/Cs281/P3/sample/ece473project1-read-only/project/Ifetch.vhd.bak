-- MIPS Processor VHDL Behavioral Model
--
-- Ifetch module (provides the PC and instruction memory) 
-- 

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
USE IEEE.STD_LOGIC_UNSIGNED.ALL;

ENTITY Ifetch IS
	PORT(	SIGNAL Instruction 		: OUT	STD_LOGIC_VECTOR( 31 DOWNTO 0 );
        	SIGNAL PC_plus_4 	: OUT	STD_LOGIC_VECTOR( 9 DOWNTO 0 );
        	SIGNAL PC 			: IN 	STD_LOGIC_VECTOR( 9 DOWNTO 0 );
      		SIGNAL PC_out 			: OUT	STD_LOGIC_VECTOR( 9 DOWNTO 0 );
        	SIGNAL clock, reset 	: IN 	STD_LOGIC);
END Ifetch;

ARCHITECTURE behavior OF Ifetch IS
   SIGNAL MemAddr : STD_LOGIC_VECTOR(7 DOWNTO 0);
   TYPE INST_MEM IS ARRAY (0 to 32) of STD_LOGIC_VECTOR (31 DOWNTO 0);
   SIGNAL iram : INST_MEM := (
		X"3c011001",
X"34280000",
X"00008020",
X"8d0a0000",
X"020a8020",
X"21080004",
X"1540fffc",
X"08100007"

   );

BEGIN 						
						
	MemAddr <= PC(9 DOWNTO 2);
	PROCESS
		BEGIN
			WAIT UNTIL ( clock'EVENT ) AND ( clock = '1' );
			IF reset = '1' THEN
				   PC_out <= "0000000000" ;
					PC_plus_4 <= "0000000000"; 
			ELSE
					PC_out <= PC;
					-- copy output signals - allows read inside module
   
					PC_plus_4( 9 DOWNTO 2 )  <= PC( 9 DOWNTO 2 ) + 1;
					PC_plus_4( 1 DOWNTO 0 )  <= "00";
			END IF;
			Instruction <= iram(CONV_INTEGER(MemAddr));
	END PROCESS;
END behavior;



Sunny Patel
CS461 - HW #3

1)

CREATE TABLE Photographers (
  ID_PHOTOGRAPHER SERIAL,
  FIRST_NAME VARCHAR(20),
  LAST_NAME VARCHAR(20),
  ORDER_FORM VARCHAR(30),
  PRIMARY KEY(ID_PHOTOGRAPHER)
);

CREATE TABLE Photographs (
  Id_photo SERIAL,
  Filename VARCHAR(20),
  Title VARCHAR(20),
  Description VARCHAR(100),
  Id_photographer INT,
  Photo_order INT,
  Height INT,
  Width INT,
  City VARCHAR(20),
  State VARCHAR(20),
  Country VARCHAR(20),
  Date_taken DATE,
  PRIMARY KEY(ID_PHOTO),
  FOREIGN KEY(Id_photographer) REFERENCES Photographers(Id_photographer)
);

CREATE TABLE PhotoSales (
  id_sale SERIAL,
  id_photo INT,
  sale_price INT,
  tax INT,
  sale_date DATE,
  Primary key (id_sale),
  foreign key (id_photo) references Photographs(id_photo)
);

CREATE TABLE RefPhotoAttributes (
  id_attribute serial,
  attribute_desc varchar(20),
  primary key(id_attribute)
);

CREATE TABLE PhotoAttributes (
  id_photo int,
  id_attribute int,
  primary key(id_photo, id_attribute),
  foreign key(id_photo) references photographs(id_photo),
  foreign key(id_attribute) references RefPhotoAttributes(id_attribute)
);

CREATE TABLE RefSalescategory (
  id_sales_category int,
  sales_category varchar(20),
  primary key(id_sales_category)
);

CREATE TABLE SalesCategories (
  id_sales_category int,
  id_photo int,
  primary key (id_photo,id_sales_category),
  foreign key (id_sales_category) references
RefSalesCategory(id_sales_category),
  foreign key (id_photo) references photographs(id_photo)
);

CREATE TABLE UpdatedPhotographs (
  filename varchar(20),
  title varchar(20),
  primary key (filename)
);

CREATE TABLE RefEquipmentUsed (
  id_equipment INT,
  equipmentdesc varchar(30),
  primary key (id_equipment)
);

CREATE TABLE PhotoEquipment (
  id_photo INT,
  id_equipment INT,
  primary key (id_photo,id_equipment),
  foreign key (id_photo) REFERENCES Photographs(id_photo),
  foreign key (id_equipment) REFERENCES RefEquipmentUsed(id_equipment)
);

/** FOLLOWING IS FOR #9 OF THE HW notice: sample data included */

CREATE TABLE Students (
  id_student int,
  id_class int,
  grade int
);

INSERT INTO Students (id_student,id_class,grade) values (1,1,90);
INSERT INTO Students (id_student,id_class,grade) values (1,2,80);
INSERT INTO Students (id_student,id_class,grade) values (2,1,99);
INSERT INTO Students (id_student,id_class,grade) values (3,1,80);
INSERT INTO Students (id_student,id_class,grade) values (4,1,70);
INSERT INTO Students (id_student,id_class,grade) values (5,2,78);
INSERT INTO Students (id_student,id_class,grade) values (6,2,90);
INSERT INTO Students (id_student,id_class,grade) values (6,3,50);
INSERT INTO Students (id_student,id_class,grade) values (7,3,90);


2)
	SELECT id_photo FROM (( PhotoEquipment INNER JOIN RefEquipmentUsed ON PhotoEquipment.ID_Equipment = RefEquipmentUsed.ID_Equipment) as A INNER JOIN Photographs ON A.Id_Photo = Photographs.ID_Photo) As B Where B. EquipmentDesc LIKE '%Tripod%';

3) UPDATE Photographs SET Title=UpdatedPhotographs.Title WHERE Photographs.filename = UpdatedPhotographs.filename;

4)
 
SELECT Title FROM (Photographs INNER JOIN (	SELECT Id_photo FROM (SELECT ID_Photo, COUNT(id_equipment) as
total_equipment_used from PhotoEquipment GROUP BY Id_photo) WHERE
total_equipment_used != (SELECT min(total_equipment_used) FROM (SELECT
id_photo, count(id_equipment) as total_equipment_used FROM PhotoEquipment
GROUP BY ID_Photo) AS A)) AS B ON Photographs.id_photo = B.Id_photo);

5)

	DELETE FROM Photographers WHERE Id_photographer IN ( Photographs INNER
JOIN ( SELECT id_photo FROM (PhotoAttributes INNER JOIN  RefPhotoAttributes
ON PhotoAttributes.Id_Attribute = RefPhotoAttributes.Id_attribute) WHERE
Attribute_desc LIKE '%Baltimore Ravens%') AS A ON Photographs.id_photo =
A.id_photo) CASCADE;

6) 
	/* There is probably a better way to accomplish this since I used like 5
 * subqueries.  Since there are many subqueries to make your life easier I split
 * it up into description of task a query is trying to do followed by the
 * actual query and then at the end I put all the queries together
 * hopefully this helps you in the grading process
 * I also label the queries. For example Let A = SELECT * FROM Photos;
 * 							Let B = SELECT Id_photographer FROM Photographer WHERE
 * 		   				id_photo IN (A)
 * ***NOTE These queries will not run with keyword LET in psql, it's a
 * simple notation I just made up.
 */
    
  /* GET ALL PHOTOS TAKEN W/O TRIPOD OR CABLE RELEASE */
LET A = SELECT Id_photo FROM (PhotoEquipment INNER JOIN RefEquipmentUsed ON
ID_Equipment) WHERE Equipment_desc NOT LIKE '%Tripod%' AND  Equipment_desc
NOT LIKE '%Cable Release%' AS A

	/* WHO SOLD THE MOST PHOTOS FROM THE LIST ACQUIRED ABOVE */
LET B = SELECT id_photographers, COUNT(id_sale) as most_sold FROM
(Photographs INNER JOIN PhotoSales on Photographs.id_photo =
PhotoSales.id_photo) WHERE ID_photo IN (A) AS B

LET C = SELECT max(most_sold) FROM (B) AS C

LET D = SELECT id_photo FROM (B) WHERE most_sold = (C) AS D

finally,
	SELECT Sales_category FROM ((SalesCategories INNER JOIN (B) on B.ID_photo
= SalesCategories.ID_photo) AS E INNER JOIN RefSalesCategory ON
E.id_sales_category = RefSalesCategory.Id_sales_category) AS F WHERE F.id_photo IN
(D) ORDER BY Sales_category;


SELECT Sales_category FROM ((SalesCategories INNER JOIN (SELECT
id_photographers, COUNT(id_sale) as most_sold FROM
(Photographs INNER JOIN PhotoSales on Photographs.id_photo =
PhotoSales.id_photo) WHERE ID_photo IN (SELECT Id_photo FROM (PhotoEquipment
INNER JOIN RefEquipmentUsed ON
ID_Equipment) WHERE Equipment_desc NOT LIKE '%Tripod%' AND  Equipment_desc
NOT LIKE '%Cable Release%' AS A
) AS B) on B.ID_photo
= SalesCategories.ID_photo) AS E INNER JOIN RefSalesCategory ON
E.id_sales_category = RefSalesCategory.Id_sales_category) AS F WHERE
F.id_photo IN
(SELECT id_photo FROM (SELECT id_photographers, COUNT(id_sale) as most_sold
FROM
(Photographs INNER JOIN PhotoSales on Photographs.id_photo =
PhotoSales.id_photo) WHERE ID_photo IN (SELECT Id_photo FROM (PhotoEquipment
INNER JOIN RefEquipmentUsed ON
ID_Equipment) WHERE Equipment_desc NOT LIKE '%Tripod%' AND  Equipment_desc
NOT LIKE '%Cable Release%' AS A
) AS B) WHERE most_sold = (SELECT max(most_sold) FROM (SELECT
id_photographers, COUNT(id_sale) as
most_sold FROM
(Photographs INNER JOIN PhotoSales on Photographs.id_photo =
PhotoSales.id_photo) WHERE ID_photo IN (SELECT Id_photo FROM (PhotoEquipment
INNER JOIN RefEquipmentUsed ON
ID_Equipment) WHERE Equipment_desc NOT LIKE '%Tripod%' AND  Equipment_desc
NOT LIKE '%Cable Release%' AS A
) AS B
) AS C
) AS D
) ORDER BY Sales_category;

7)

I don't know how to search with in a table for two of the same dates and
select them.

8) 
/* Get the id of photographers who sold the largest and smallest photo */
LET a = 	SELECT Id_photographer, max(height * width) as size from Photographs GROUP
BY id_photo HAVING max(height*width) = (SELECT max(height * width) FROM
Photographs)
 UNION
	SELECT Id_photographer, min(height * width) AS size FROM Photographs GROUP
BY id_photo HAVING min(height*width) = (SELECT min(height * width) FROM
Photographs)) 

/* GET the last name and first name of those photographers aquired above */
SELECT Last_name, First_name FROM (a INNER JOIN Photographers ON
A.id_photographer = photographers.id_photographer) ORDER BY Last_name,
First_name;

// Final query putting everything together

SELECT Last_name, First_name FROM ((SELECT Id_photographer, max(height *
width) as size from Photographs GROUP
BY id_photo HAVING max(height*width) = (SELECT max(height * width) FROM
Photographs)
 UNION
  SELECT Id_photographer, min(height * width) AS size FROM Photographs GROUP
BY id_photo HAVING min(height*width) = (SELECT min(height * width) FROM
Photographs)) 
) AS A INNER JOIN Photographers ON
A.id_photographer = photographers.id_photographer) ORDER BY Last_name,
First_name;

9)
	// 1) has the create table sql for this and also the insert sample data
	// sql

SELECT DISTINCT id_student, id_class, grade, rank() OVER (PARTITION BY
id_class ORDER BY grade desc) FROM students;
